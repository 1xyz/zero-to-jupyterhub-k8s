#!/usr/bin/env python3
"""automatically manage requirements.txt dependencies with pip-tools

./dependencies --help for info
"""

from functools import lru_cache
import json
import os
from subprocess import check_call, check_output

import click
from ruamel.yaml import YAML

yaml = YAML()
here = os.path.dirname(os.path.abspath(__file__))
chartpress_yaml = os.path.join(here, os.pardir, os.pardir, "chartpress.yaml")
values_yaml = os.path.join(here, os.pardir, os.pardir, "jupyterhub", "values.yaml")
image = 'hub-dependencies'


@lru_cache()
def build_args(image='hub'):
    """retrieve docker build arguments from chartpress config file"""
    with open(chartpress_yaml) as f:
        chartpress_config = yaml.load(f)
    chart = chartpress_config['charts'][0]
    image = chart['images'][image]
    return image.get('buildArgs', {})


def build_image():
    """Build the docker image"""
    click.echo(f"Building image {image}")
    build_arg_dict = build_args()
    build_arg_list = []
    for key in sorted(build_arg_dict):
        value = build_arg_dict[key]
        build_arg_list.append("--build-arg")
        build_arg_list.append(f"{key}={value}")
    check_call(["docker", "build", "-t", image] + build_arg_list + [here])


@click.group()
def cli():
    """Manage the Python dependencies in this image."""
    pass


@click.command()
@click.option(
    '--build/--no-build',
    help="add --no-build to skip building the image prior to upgrading",
    default=True,
)
@click.option(
    '--upgrade/--no-upgrade',
    help="--upgrade to upgrade all dependencies within the range specified in requirements.in",
    default=False,
)
@click.option(
    '--upgrade-package',
    help="specify individual packages to upgrade within the range specified in requirements.in",
    multiple=True,
)
def freeze(build, upgrade, upgrade_package):
    """Freeze the environment, updating requirements.txt from requirements.in

    Individual packages can be updated, or the whole environment
    """
    if build:
        build_image()
    click.echo("freezing dependencies with pip-compile")
    upgrade_args = []
    if upgrade:
        upgrade_args.append("--upgrade")
    for pkg in upgrade_package:
        upgrade_args.append("--upgrade-package")
        upgrade_args.append(pkg)
    check_call(
        [
            "docker",
            "run",
            "--rm",
            "-it",
            "--volume",
            f"{here}:/io",
            "--workdir",
            "/io",
            image,
            "pip-compile",
        ]
        + upgrade_args
    )


cli.add_command(freeze)


@click.command()
@click.option('--build/--no-build', default=True)
def outdated(build):
    """Check for outdated dependencies with pip."""
    if build:
        build_image()
    click.echo("Checking for outdated dependencies with pip.")
    outdated_json = check_output(
        [
            "docker",
            "run",
            "--rm",
            "-it",
            image,
            "pip",
            "list",
            "--outdated",
            "--format=json",
        ]
    ).decode("utf8")
    outdated = json.loads(outdated_json)
    have_outdated = False
    for pkg in outdated:
        name = pkg['name']
        # ignore some common packages that aren't relevant to our requirements.txt
        if name in {'pip', 'setuptools', 'wheel'}:
            continue
        have_outdated = True
        version = pkg['version']
        latest = pkg['latest_version']
        # TODO: parser requirements.in to check if latest is in-range?
        # If they are in-range, running freeze again is enough,
        # but if they are outside the range, requirements.in needs to be updated
        # first to pick them up
        # for now, print as much so humans can decide
        print(f"Have {name}=={version}, latest is {name}=={latest}")

    if have_outdated:
        print("There are outdated dependencies!")
        print(
            "To pick up any versions outside the range(s) specified in requirements.in,"
        )
        print("update the pinning(s) in that file.")
        print(
            "To update the whole environment within the given ranges, run `./dependencies freeze --upgrade`"
        )
        print(
            "To update one or more specific packages, run `./dependencies freeze --upgrade-package pkg1 [--upgrade-package pkg2]`"
        )
    else:
        print("Everything appears to be up-to-date!")


cli.add_command(outdated)


if __name__ == '__main__':
    cli()
