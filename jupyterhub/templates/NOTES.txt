Thank you for installing JupyterHub!

Your release is named "{{ .Release.Name }}" and installed into the namespace "{{ .Release.Namespace }}".

You can check whether the hub and proxy are ready by running:

 kubectl --namespace={{ .Release.Namespace }} get pod

and watching for both those pods to be in status 'Running'.{{ println }}

{{- if eq .Values.proxy.service.type "LoadBalancer" }}
You can find the public (load-balancer) IP of JupyterHub by running:

  kubectl -n {{ .Release.Namespace }} get svc {{ include "jupyterhub.proxy-public.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[].ip}'

It might take a few minutes for it to appear!
{{- end }}
{{- if eq .Values.proxy.service.type "ClusterIP" }}
You can find the internal (cluster) IP of JupyterHub by running:

  kubectl get -n {{ .Release.Namespace }} svc {{ include "jupyterhub.proxy-public.fullname" . }} -o jsonpath='{.spec.clusterIP}'
{{- end }}
{{- if eq .Values.proxy.service.type "NodePort" }}
You can find the NodePorts of JupyterHub by running:

  kubectl --namespace={{ .Release.Namespace }} get svc {{ include "jupyterhub.proxy-public.fullname" . }} -o jsonpath='{range .spec.ports[*]} {.name}: {.port}{"\n"} {end}'
{{- end }}

{{- if .Values.ingress.enabled }}

You should be able to access JupyterHub using your configured ingress at:
{{ range $host := .Values.ingress.hosts }}
  http://{{ $host }}{{ $.Values.hub.baseUrl | trimSuffix "/" }}/
{{- end }}
{{- range $tls := .Values.ingress.tls }}
  {{- range $host := $tls.hosts }}
  https://{{ $host }}{{ $.Values.hub.baseUrl | trimSuffix "/" }}/
  {{- end }}
{{- end }}

{{- end }}

To get full information about the JupyterHub proxy service run:

  kubectl --namespace={{ .Release.Namespace }} get svc {{ include "jupyterhub.proxy-public.fullname" . }}

If you have questions, please:

  1. Read the guide at https://z2jh.jupyter.org
  2. Ask for help or chat to us on https://discourse.jupyter.org/
  3. If you find a bug please report it at https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues





{{- /*
  Warnings for likely misconfiguration
*/}}

{{- if and (not .Values.scheduling.podPriority.enabled) (and .Values.scheduling.userPlaceholder.enabled .Values.scheduling.userPlaceholder.replicas) }}

WARNING: You are using user placeholders without pod priority enabled, either
enable pod priority or stop using the user placeholders to avoid wasting cloud
resources.
{{- end }}


{{- if eq .Values.proxy.https.enabled false }}
{{- if or (not (eq .Values.proxy.https.type "letsencrypt")) (not (eq (.Values.proxy.https.letsencrypt.contactEmail | default "") "")) }}{{ println }}
WARNING: Configuring proxy.https without setting proxy.https.enabled to true is no longer allowed.
{{- end }}
{{- end }}





{{- /*
  Deprecation messages that can be removed in 2.0.0 because they have been
  strictly enforced in 1.0.0.
*/}}

{{- $hard_deprecations := "" }}


{{- if hasKey .Values.hub "extraConfigMap" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: hub.extraConfigMap has been renamed to custom" }}
{{- end }}


{{- if hasKey .Values "auth" }}
{{- if .Values.auth }}
{{- $hard_deprecations = print $hard_deprecations (include "jupyterhub.authDep.remapOldToNew" .) }}
{{- else }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: Please remove the empty 'auth' config" }}
{{- end }}
{{- end }}


{{- if hasKey .Values.proxy "containerSecurityContext" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: proxy.containerSecurityContext has been renamed to proxy.chp.containerSecurityContext" }}
{{- end }}


{{- if hasKey .Values.proxy "pdb" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: proxy.pdb has renamed to proxy.chp.pdb" }}
{{- end }}


{{- if hasKey .Values.proxy "networkPolicy" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: proxy.networkPolicy has been renamed to proxy.chp.networkPolicy" }}
{{- end }}


{{- if hasKey .Values.hub "uid" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: hub.uid must as of 1.0.0 be configured using hub.containerSecurityContext.runAsUser" }}
{{- end }}


{{- if hasKey .Values.hub "imagePullSecret" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: hub.imagePullSecret has renamed to imagePullSecret" }}
{{- end }}


{{- if hasKey .Values.singleuser "imagePullSecret" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: singleuser.imagePullSecret has renamed to imagePullSecret" }}
{{- end }}


{{- if hasKey .Values.singleuser.cloudMetadata "enabled" }}
{{- $hard_deprecations = print $hard_deprecations "\n\nHARD DEPRECATION: singleuser.cloudMetadata.enabled must as of 1.0.0 be configured using singleuser.cloudMetadata.blockWithIptables with the opposite value." }}
{{- end }}


{{- if $hard_deprecations }}
{{- fail $hard_deprecations }}
{{- end }}





{{- /*
  Deprecation messages that can be removed in 3.0.0
*/}}
