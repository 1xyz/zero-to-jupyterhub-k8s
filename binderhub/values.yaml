resources:
  requests:
    cpu: 0.2
    memory: 512Mi

image:
  name: jupyterhub/k8s-binderhub
  tag: v0.3.1

repo2dockerImage: jupyter/repo2docker:v0.2.2

registry:
  enabled: false
  prefix: binderhub/
  host: gcr.io
  username: _json_key
  password: null

service:
  type: LoadBalancer


jupyterhub:
  hub:
    extraConfig: |
      import json
      from tmpauthenticator import TmpAuthenticator
      class DynamicImageAuth(TmpAuthenticator):
          def process_user(self, user, handler):
              image = handler.get_argument('image', None, True)
              user.spawner.singleuser_image_spec = image
              user.spawner.default_url = handler.get_argument('default_url', '/tree', True)
              return user
      c.JupyterHub.authenticator_class = DynamicImageAuth
      c.DynamicImageAuth.force_new_server = True
      c.KubeSpawner.args.append('--NotebookApp.disable_check_xsrf=True')
      c.KubeSpawner.args.append('--NotebookApp.allow_origin="*"')
      # FIXME: Make this more secure?
      c.KubeSpawner.args.append('--NotebookApp.tornado_settings={}'.format(json.dumps({'headers': {'Content-Security-Policy': ' '}})))

  singleuser:
    storage:
      type: none
    memory:
      guarantee: null
  prePuller:
    enabled: false

deployment:
  labels: {}

ingress:
  enabled: false
  hosts:
    - chart-example.local
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: {}
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
